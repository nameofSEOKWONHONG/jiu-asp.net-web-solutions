<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApiApplication</name>
    </assembly>
    <members>
        <member name="T:WebApiApplication.ConfigureSwaggerOptions">
            <summary>
            Configures the Swagger generation options.
            </summary>
            <remarks>This allows API versioning to define a Swagger document per API version after the
            <see cref="T:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider"/> service has been resolved from the service container.</remarks>
        </member>
        <member name="M:WebApiApplication.ConfigureSwaggerOptions.#ctor(Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:WebApiApplication.ConfigureSwaggerOptions"/> class.
            </summary>
            <param name="provider">The <see cref="T:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider">provider</see> used to generate Swagger documents.</param>
        </member>
        <member name="M:WebApiApplication.ConfigureSwaggerOptions.Configure(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <inheritdoc />
        </member>
        <member name="T:WebApiApplication.SwaggerDefaultValues">
            <summary>
            Represents the Swagger/Swashbuckle operation filter used to document the implicit API version parameter.
            </summary>
            <remarks>This <see cref="T:Swashbuckle.AspNetCore.SwaggerGen.IOperationFilter"/> is only required due to bugs in the <see cref="T:Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator"/>.
            Once they are fixed and published, this class can be removed.</remarks>    
        </member>
        <member name="M:WebApiApplication.SwaggerDefaultValues.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies the filter to the specified operation using the given context.
            </summary>
            <param name="operation">The operation to apply the filter to.</param>
            <param name="context">The current operation filter context.</param>
        </member>
        <member name="M:WebApiApplication.Controllers.AccountController.RefreshToken(System.String,System.String)">
            <summary>
            TODO : 미구현 상태
            </summary>
            <param name="token"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiApplication.Controllers.IndexController.Sample2(Domain.Enums.ENUM_ROLE_TYPE)">
            <summary>
            not working
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiApplication.Extensions.ApplicationBuilderExtenions.UseDevelopmentHandling(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            개발설정
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiApplication.Extensions.ApplicationBuilderExtenions.UseConfigureSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider)">
            <summary>
            swagger 설정
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiApplication.Extensions.ApplicationBuilderExtenions.UseResponseCache(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            응답 캐시 설정
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiApplication.Extensions.ApplicationBuilderExtenions.UseConfigureEndPoints(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            endpoint 설정
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiApplication.Extensions.ApplicationBuilderExtenions.UseConfigureMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            미들웨어 설정
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiApplication.Extensions.ApplicationBuilderExtenions.UseHangfire(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            hangfire 설정
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:WebApiApplication.Extensions.ConfigureServicesExtensions">
            <summary>
            ConfigService에 등록될 Add Method들의 집합
            </summary>
        </member>
        <member name="M:WebApiApplication.Extensions.ConfigureServicesExtensions.AddConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            ServiceCollection에 등록, 등록 순서는 영향이 없다.
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:WebApiApplication.Extensions.ConfigureServicesExtensions.AddInjectors(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            왜 인젝터라는 걸 만들어서 써야 하나?
            보통 닷넷에서 IoC컨테이너는 Autofac을 사용하겠지만 개인적인 사용 경험으로는 Autofac을 사용하여 Assembly로드로 한번에 로드하여
            사용하는 방식으로 대부분 사용할 것이다. 물론 개별로 설정하여 사용할 수 있지만, 대부분의 프로젝트에서 그런 케이스를 보지 못했다.
            따라서 내부 구현에서 transient, soope, singleton을 별도로 구현해서 사용한다.
            이런 구현이 좋은 방향일까... 절대 아니라고 생각한다. IoC컨테이너 설계 철학에도 맞지 않는다.
            따라서, 대부분의 프로젝트를 작은 단위로 유지하면서 아래와 같이 공통으로 처리하는 Injector를 갖는 것이 최선이라고 생각된다.
            물론 Autofac에서도 동일하게 만들수 있지만, dotnet core 3 이상 부터는 IoC컨테이너를 자체적으로 지원하므로 괜히 외부의존성을
            늘릴 필요는 없다고 생각된다.
            일부 사람들은 너무 구식 방식이라고 하던데... 어떻게 해야 최신으로 하는 것인지는 의문이다.
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:WebApiApplication.Extensions.PluginExtensions">
            <summary>
            Plugin 추가 확장 집합
            </summary>
        </member>
        <member name="M:WebApiApplication.Extensions.PluginExtensions.AddPluginFiles(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Plugin 추가 구현
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="P:WebApiApplication.Filters.RoleAuthorize.RoleType">
            <summary>
            enable split
            </summary>
        </member>
        <member name="P:WebApiApplication.Filters.RoleAuthorize.PermissionType">
            <summary>
            enable split
            </summary>
        </member>
        <member name="T:WebApiApplication.Program">
            <summary>
            TODO : https://github.com/natemcmaster/DotNetCorePlugins 참고하여 Plugin System으로 확장해 보자.
            TODO : 기존 구현을 참고한다. 다만, 진행하기 전까지의 작업이 Version2로 한다.
            TODO : 이후 버전은 V3로 한다.
            </summary>
        </member>
        <member name="M:WebApiApplication.Program.ConfigureLogging">
            <summary>
            <see href="https://www.humankode.com/asp-net-core/logging-with-elasticsearch-kibana-asp-net-core-and-docker"/>
            </summary>
        </member>
        <member name="T:HelloWorldScript">
            <summary>
            캐시 전 : 0.2~3초
            캐시 후 : 0.1~2초
            비스크립트 : 0.1초내
            </summary>
        </member>
    </members>
</doc>
